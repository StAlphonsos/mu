.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "mup 3"
.TH mup 3 "2015-06-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mup \- perl interface to mu
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use mup;
\&
\&  my $mu = mup\->new();
\&
\&  my @results = $mu\->find({ subject => \*(Aqsomething\*(Aq});
\&  print scalar(@results)." results for subject:something\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a perl interface to mu, the Maildir search-and-destroy system.
It presents the same \s-1API\s0 as described in the \fImu\-server\fR\|(1) man page.
In fact it works by communicating with a \f(CW\*(C`mu server\*(C'\fR process, just
like the \f(CW\*(C`mu4e\*(C'\fR emacs interface to mu does.
.SH "METHODS"
.IX Header "METHODS"
All of the following methods take arguments named as described in the
\&\fImu\-server\fR\|(1) man page per each command, again either as a single
hashref argument or as a hash of pairs in-line.  If there are any
doubts, make sure to read the \fImu\-server\fR\|(1) man page.  Where
relevant any \f(CW\*(C`maildir\*(C'\fR argument defaults to \f(CW\*(C`~/Maildir\*(C'\fR (not our
doing, that's just how \f(CW\*(C`mu\*(C'\fR rolls).
.PP
In order to stay agnostic with respect to the use our clients put us
to, all exported methods return plain, unblessed hashrefs as their
result.  The shape of this hashref corresponds to the S\-Expression
described in the \fImu\-server\fR\|(1) man page for each command.  Since
everything that comes back from the server is represented as a list
(to us: array), we use a simple heuristic to determine if a an array
in the output is hashrefian or not: if it is of non-zero, even length
and if every even-numbered key is a symbol that starts with a colon we
consider the array hashrefian.  In these cases we perform the obvious
transformation of stripping the leading colon and turning the thing
into a hashref.
.IP "\(bu" 4
new (verbose => 1|0, ... other options... )
.Sp
Construct a new interface object; this will cause a \f(CW\*(C`mu server\*(C'\fR
process to be started.
.Sp
Options can be specified Moose-style, either as a hashref
or as a hash of pairs:
.RS 4
.IP "\(bu" 4
verbose
.Sp
If non-zero we spew debug output to \f(CW\*(C`stderr\*(C'\fR via warn.
.IP "\(bu" 4
tout
.Sp
Timeout in seconds for responses from \fImu\-server\fR\|(1).  The
Can be fractional.  The default is \f(CW0.5\fR (500 msec).
.IP "\(bu" 4
bufsiz
.Sp
Buffer size for reads from the server.  Default is 2048.
.IP "\(bu" 4
max_tries
.Sp
Max number of times we will try to read from the server to complete
a single transaction.  By default this is zero, which means no limit.
.IP "\(bu" 4
mu_bin
.Sp
Name of the \f(CW\*(C`mu\*(C'\fR binary to use to start the server.
.IP "\(bu" 4
mu_server_cmd
.Sp
\&\f(CW\*(C`Mu\*(C'\fR subcommand used to start the server.
.IP "\(bu" 4
mu_home
.Sp
Directory for Mu to use to store the Xapian database and other
Mu-specific files.  Defaults to \f(CW\*(C`~/.mu\*(C'\fR.
.IP "\(bu" 4
maildir
.Sp
Root of the \f(CW\*(C`Maildir\*(C'\fR tree that \fImu\fR\|(1) should operate on.  Defaults
to whatever the \f(CW$MAILDIR\fR environment variable is set to or
\&\f(CW\*(C`~/Maildir\*(C'\fR if it is not set.
.IP "\(bu" 4
debug
.Sp
If non-zero additional debug output will be spewed via warn, mainly
related to the transformation of Data::SExpression objects into
hashrefs.  This output is spewed independently of the value of \f(CW\*(C`verbose\*(C'\fR.
.RE
.RS 4
.RE
.IP "\(bu" 4
finish
.Sp
Shut down the mu server and clean up.
.IP "\(bu" 4
add (path => \*(L"/path/to/file\*(R", maildir => \*(L"/my/Maildir\*(R")
.Sp
Add a message (document) to the database.  If \f(CW\*(C`maildir\*(C'\fR is not
specified the right thing is filled in.
.IP "\(bu" 4
compose (type => 'reply|forward|edit|new', docid => \f(CW$docid\fR)
.Sp
Compose a message, either in regard to an existing one (in which case
you must specify \f(CW\*(C`docid\*(C'\fR) or as a new message.
.IP "\(bu" 4
contacts (personal => 1|0, after => \f(CW$epoch_time\fR)
.Sp
Search contacts.
.IP "\(bu" 4
extract (action => 'save|open|temp', index => \f(CW$index\fR, path => \f(CW$path\fR, what => \f(CW$what\fR, param => \f(CW$param\fR)
.Sp
Save a message into a file.
.IP "\(bu" 4
find (query => \f(CW$mu_query\fR, threads => 1|0, sortfield => \f(CW$field\fR, reverse => 1|0, maxnum => \f(CW$max_results\fR)
.Sp
Search the message Xapian database.
.IP "\(bu" 4
index (path => \f(CW$path\fR, my-addresses: 'me,and,mine', callback => \f(CW$sub\fR)
.Sp
(Re)index the messagebase.  The mu server updates us with progress
every 500 messages.  By default we only return the final result
after all indexing has occurred but if the caller wants to e.g. update
a progress meter or something it can pass us a special \f(CW\*(C`callback\*(C'\fR
argument that is invoked with every progress report given to us by
the server.
.IP "\(bu" 4
mkdir (path => \f(CW$path\fR)
.Sp
Make a new maildir under your Maildir basedir.
.IP "\(bu" 4
move ( docid => \f(CW$docid\fR | msgid => \f(CW$msgid\fR, maildir => \f(CW$path\fR, flags => \f(CW$flags\fR)
.Sp
Move a message from one maildir folder to another.
.IP "\(bu" 4
ping ()
.Sp
Ping the server to make sure it is alive.
.IP "\(bu" 4
remove (docid => \f(CW$docid\fR)
.Sp
Remove a message by document \s-1ID.\s0
.IP "\(bu" 4
view ( docid => \f(CW$docid\fR | msgid => \f(CW$msgid\fR | path => \f(CW$path\fR, extract_images => 1|0, use_agent => 1|0, auto_retrieve_key => 1|0)
.Sp
Return a canonicalized view of a message, optionally with images
and/or cryptography (\s-1PGP\s0) dealt with.  The message can be specified by
\&\f(CW\*(C`docid\*(C'\fR, \f(CW\*(C`msgid\*(C'\fR or as a path to a file containing the message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImu\fR\|(1), \fImu\-server\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
attila <attila@stalphonsos.com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2015 by attila <attila@stalphonsos.com>
.PP
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.\s0
